#!/bin/bash

usage() {
  cat <<-EOF
  usage: ${0} -d /path/to/git/repository [-a] [-c] [-r] [-u]

    -h            this help screen
    -d path       install the hooks to the specified path
    -a            deploy pre-commit and pre-receive hooks
    -c            deploy only the pre-commit hook
    -r            deploy only the pre-receive hook
    -u            deploy only the post-update hook

  returns status code of 0 for success, otherwise, failure

  examples:

  1) to install pre-commit and pre-receive the hooks to foo git repo:

    ${0} -d /path/to/foo -a

  2) to install only the pre-commit hook to bar git repo:

    ${0} -d /path/to/bar -c

  3) to install only the pre-commit and pre-receive hook to foobar git repo:

    ${0} -d /path/to/foobar -c -r

EOF
}

while getopts ":d:achru" opt; do
  case $opt in
    a)
      INST_COMMIT=1
      INST_RECEIVE=1
      ;;
    c)
      INST_COMMIT=1
      ;;
    d)
      GIT_REPO="$OPTARG"
      ;;
    h)
      usage
      exit -1
      ;;
    r)
      INST_RECEIVE=1
      ;;
    u)
      INST_UPDATE=1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      usage
      ;;
  esac
done

# We need at least one hook to deploy
if [[ -z "${INST_COMMIT}" \
  && -z "${INST_RECEIVE}" \
  && -z "${INST_UPDATE}" ]]; then
  echo "Error: You must specify at least one hook to deploy" >&2
  usage
  exit -2
fi

# We need to have a git repository specified
if [ -z "${GIT_REPO}" ]; then
  echo "Error: No repository specified" >&2
  usage
  exit -3
fi

# Check if the repo specified is a submodule
if [ -f "${GIT_REPO}/.git" ]; then
  SUBMODULE_REPO=$(cat "${GIT_REPO}/.git" | grep 'gitdir' | awk '{print $2}')
  GIT_REPO="$(cd "${GIT_REPO}" ; cd "${SUBMODULE_REPO}" ; pwd)"
fi

# Make sure the repo specified is valid, submodule or normal
if [[ -n "${SUBMODULE_REPO}" && ! -d "${GIT_REPO}" ]]; then
  echo "Error: Submodule does not appear to be a valid repository" >&2
  exit -3
elif [[ -z "${SUBMODULE_REPO}" && ! -d "${GIT_REPO}/.git" ]]; then
  echo "Error: ${GIT_REPO} is not a valid git repository" >&2
  exit -3
fi

# Cleanup the hooks directory so it works properly
HOOKS_DIR=$(dirname "${0}")
HOOKS_DIR=$(cd "${HOOKS_DIR}" ; pwd)

# Install the hooks!
if [ "${INST_COMMIT}" = "1" ]; then
  ln -sf "${HOOKS_DIR}/pre-commit" "${GIT_REPO}/hooks/pre-commit" \
  && echo "pre-commit hook deployed successfully" \
  || ( echo "pre-commit hook failed to deploy" >&2 ; exit -4 )
fi

if [ "${INST_RECEIVE}" = "1" ]; then
  ln -sf "${HOOKS_DIR}/pre-receive" "${GIT_REPO}/hooks/pre-receive" \
  && echo "pre-receive hook deployed successfully" \
  || ( echo "pre-receive hook failed to deploy" >&2 ; exit -5 )
fi

if [ "${INST_UPDATE}" = "1" ]; then
  ln -sf "${HOOKS_DIR}/post-update" "${GIT_REPO}/hooks/post-update" \
  && echo "post-update hook deployed successfully" \
  || ( echo "post-update hook failed to deploy" >&2 ; exit -6 )
fi
